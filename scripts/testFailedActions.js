const mongoose = require('mongoose');
require('dotenv').config();

const CapturePoint = require('../models/CapturePoint');
const Faction = require('../models/Faction');

async function testFailedActions() {
    try {
        // Connexion √† MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/capture_ninja', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('üß™ Test des actions rat√©es...\n');
        
        // Trouver un point de capture et une faction pour les tests
        const testPoint = await CapturePoint.findOne({ name: 'Clairi√®re de Konoha' });
        const kiriFaction = await Faction.findOne({ name: 'Kiri' });
        
        if (!testPoint || !kiriFaction) {
            console.log('‚ùå Point de test ou faction Kiri non trouv√©e');
            return;
        }
        
        console.log(`üéØ Point de test: ${testPoint.name}`);
        console.log(`üéØ Faction de test: ${kiriFaction.name}`);
        
        // Test 1: Attaque rat√©e
        console.log('\n‚ùå Test 1: Attaque rat√©e...');
        try {
            const response = await fetch('http://localhost:3000/api/capture-events/attack-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    capturePointId: testPoint._id,
                    factionId: kiriFaction._id,
                    participants: [
                        { name: 'Test_Kiri_1', role: 'leader' },
                        { name: 'Test_Kiri_2', role: 'member' }
                    ]
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ Attaque rat√©e enregistr√©e avec succ√®s');
                console.log(`   - √âv√©nement cr√©√©: ${data.event._id}`);
            } else {
                const error = await response.json();
                console.log(`‚ùå Erreur: ${error.error}`);
            }
        } catch (error) {
            console.log(`‚ùå Erreur de connexion: ${error.message}`);
        }
        
        // Test 2: D√©fense rat√©e
        console.log('\n‚ùå Test 2: D√©fense rat√©e...');
        try {
            const response = await fetch('http://localhost:3000/api/capture-events/defense-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    capturePointId: testPoint._id,
                    factionId: kiriFaction._id,
                    participants: [
                        { name: 'Test_Kiri_3', role: 'leader' },
                        { name: 'Test_Kiri_4', role: 'member' }
                    ]
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ D√©fense rat√©e enregistr√©e avec succ√®s');
                console.log(`   - √âv√©nement cr√©√©: ${data.event._id}`);
            } else {
                const error = await response.json();
                console.log(`‚ùå Erreur: ${error.error}`);
            }
        } catch (error) {
            console.log(`‚ùå Erreur de connexion: ${error.message}`);
        }
        
        // Test 3: V√©rifier le timer de confrontation
        console.log('\n‚è∞ Test 3: V√©rification du timer de confrontation...');
        const updatedPoint = await CapturePoint.findById(testPoint._id);
        if (updatedPoint.confrontationTimer) {
            console.log(`‚úÖ Timer de confrontation d√©fini: ${updatedPoint.confrontationTimer}`);
            console.log(`‚úÖ Derni√®re confrontation: ${updatedPoint.lastConfrontationType}`);
            console.log(`‚úÖ Par faction: ${updatedPoint.lastConfrontationBy}`);
        } else {
            console.log('‚ùå Timer de confrontation non d√©fini');
        }
        
        console.log('\nüéâ Tests des actions rat√©es termin√©s !');
        console.log('\nüîß Corrections apport√©es:');
        console.log('   ‚úÖ window.app.showInfo ‚Üí window.app.showSuccess');
        console.log('   ‚úÖ Actions rat√©es fonctionnelles');
        console.log('   ‚úÖ Timer de confrontation mis √† jour');
        console.log('   ‚úÖ Statistiques des joueurs Kiri mises √† jour');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nConnexion ferm√©e');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    testFailedActions();
}

module.exports = { testFailedActions };
