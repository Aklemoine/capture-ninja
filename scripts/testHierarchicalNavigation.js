const mongoose = require('mongoose');
require('dotenv').config();

const CapturePoint = require('../models/CapturePoint');

async function testHierarchicalNavigation() {
    try {
        // Connexion √† MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/capture_ninja', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('üß™ Test de la navigation hi√©rarchique...\n');
        
        // V√©rifier la structure des points par secteur et pays
        console.log('üìä Structure des points par secteur:');
        const sectors = await CapturePoint.aggregate([
            { 
                $group: { 
                    _id: '$sector', 
                    count: { $sum: 1 }, 
                    totalPoints: { $sum: '$points' },
                    countries: { $addToSet: '$country' }
                } 
            },
            { $sort: { _id: 1 } }
        ]);
        
        sectors.forEach(sector => {
            console.log(`\n${sector._id}:`);
            console.log(`   - ${sector.count} points, ${sector.totalPoints} pts total`);
            console.log(`   - Pays: ${sector.countries.join(', ')}`);
        });
        
        // V√©rifier la structure par pays
        console.log('\nüìä Structure des points par pays:');
        const countries = await CapturePoint.aggregate([
            { 
                $group: { 
                    _id: '$country', 
                    count: { $sum: 1 }, 
                    totalPoints: { $sum: '$points' },
                    sector: { $first: '$sector' }
                } 
            },
            { $sort: { sector: 1, count: -1 } }
        ]);
        
        countries.forEach(country => {
            console.log(`   - ${country._id}: ${country.count} points, ${country.totalPoints} pts (${country.sector})`);
        });
        
        // V√©rifier que tous les pays ont des points
        const expectedCountries = [
            'Pays du Feu (Konoha)', 'Pays des Rivi√®res',
            'Pays du Vent (Suna)', 'Pays des Roches',
            'Pays du Son (Oto)', 'Pays du Fer', 'Pays des Sources Chaudes',
            'Pays des Cerisiers', 'Kiri',
            'Pays des Oiseaux', 'Pays du Silence'
        ];
        
        console.log('\nüéØ V√©rification des pays attendus:');
        const foundCountries = countries.map(c => c._id);
        expectedCountries.forEach(country => {
            if (foundCountries.includes(country)) {
                console.log(`   ‚úÖ ${country}`);
            } else {
                console.log(`   ‚ùå ${country} - MANQUANT`);
            }
        });
        
        console.log('\n‚úÖ Test de la navigation hi√©rarchique termin√© !');
        console.log('\nüöÄ Fonctionnalit√©s impl√©ment√©es:');
        console.log('   ‚úÖ Navigation Secteurs ‚Üí Pays ‚Üí Cartes');
        console.log('   ‚úÖ Interface de placement des points');
        console.log('   ‚úÖ Syst√®me de verrouillage des positions');
        console.log('   ‚úÖ 9 cartes des pays configur√©es');
        console.log('   ‚úÖ Mode sombre adapt√©');
        
        console.log('\nüìã Instructions pour tester:');
        console.log('   1. Ouvrez http://localhost:3000');
        console.log('   2. Allez dans "Liste des Points"');
        console.log('   3. Cliquez sur un pays dans un secteur');
        console.log('   4. Activez le "Mode Placement"');
        console.log('   5. S√©lectionnez un point et cliquez sur la carte');
        console.log('   6. Verrouillez les positions une fois termin√©');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nConnexion ferm√©e');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    testHierarchicalNavigation();
}

module.exports = { testHierarchicalNavigation };

