const mongoose = require('mongoose');
require('dotenv').config();

const CapturePoint = require('../models/CapturePoint');
const Faction = require('../models/Faction');
const CaptureEvent = require('../models/CaptureEvent');

async function testConfrontationTimer() {
    try {
        // Connexion √† MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/capture_ninja', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('üß™ Test du nouveau syst√®me de timer de confrontation...\n');
        
        // Trouver un point de capture et une faction pour les tests
        const testPoint = await CapturePoint.findOne({ name: 'Clairi√®re de Konoha' });
        const kiriFaction = await Faction.findOne({ name: 'Kiri' });
        
        if (!testPoint || !kiriFaction) {
            console.log('‚ùå Point de test ou faction Kiri non trouv√©e');
            return;
        }
        
        console.log(`üéØ Point de test: ${testPoint.name}`);
        console.log(`üéØ Faction de test: ${kiriFaction.name}`);
        
        // Test 1: Attaque r√©ussie
        console.log('\n‚öîÔ∏è Test 1: Attaque r√©ussie...');
        await testPoint.confrontationSuccess(kiriFaction._id, 'attack', [
            { name: 'Test_Kiri_1', role: 'leader' },
            { name: 'Test_Kiri_2', role: 'member' }
        ]);
        
        const updatedPoint1 = await CapturePoint.findById(testPoint._id);
        console.log(`‚úÖ Timer de confrontation d√©fini: ${updatedPoint1.confrontationTimer}`);
        console.log(`‚úÖ Derni√®re confrontation: ${updatedPoint1.lastConfrontationType}`);
        console.log(`‚úÖ Par faction: ${updatedPoint1.lastConfrontationBy}`);
        
        // Attendre 1 seconde pour avoir des timers diff√©rents
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Test 2: D√©fense r√©ussie (doit remplacer le timer d'attaque)
        console.log('\nüõ°Ô∏è Test 2: D√©fense r√©ussie...');
        await testPoint.confrontationSuccess(kiriFaction._id, 'defense', [
            { name: 'Test_Kiri_3', role: 'leader' },
            { name: 'Test_Kiri_4', role: 'member' }
        ]);
        
        const updatedPoint2 = await CapturePoint.findById(testPoint._id);
        console.log(`‚úÖ Nouveau timer de confrontation: ${updatedPoint2.confrontationTimer}`);
        console.log(`‚úÖ Derni√®re confrontation: ${updatedPoint2.lastConfrontationType}`);
        
        // V√©rifier que le timer a √©t√© mis √† jour
        if (updatedPoint2.confrontationTimer > updatedPoint1.confrontationTimer) {
            console.log('‚úÖ Timer mis √† jour correctement');
        } else {
            console.log('‚ùå Timer non mis √† jour');
        }
        
        // Attendre 1 seconde
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Test 3: Attaque rat√©e (doit aussi mettre √† jour le timer)
        console.log('\n‚ùå Test 3: Attaque rat√©e...');
        await testPoint.confrontationFailed(kiriFaction._id, 'attack', [
            { name: 'Test_Kiri_5', role: 'member' }
        ]);
        
        const updatedPoint3 = await CapturePoint.findById(testPoint._id);
        console.log(`‚úÖ Timer apr√®s attaque rat√©e: ${updatedPoint3.confrontationTimer}`);
        console.log(`‚úÖ Derni√®re confrontation: ${updatedPoint3.lastConfrontationType}`);
        
        // Test 4: D√©fense rat√©e
        console.log('\n‚ùå Test 4: D√©fense rat√©e...');
        await testPoint.confrontationFailed(kiriFaction._id, 'defense', [
            { name: 'Test_Kiri_1', role: 'leader' },
            { name: 'Test_Kiri_2', role: 'member' }
        ]);
        
        const updatedPoint4 = await CapturePoint.findById(testPoint._id);
        console.log(`‚úÖ Timer apr√®s d√©fense rat√©e: ${updatedPoint4.confrontationTimer}`);
        console.log(`‚úÖ Derni√®re confrontation: ${updatedPoint4.lastConfrontationType}`);
        
        // Test 5: Finaliser capture (doit effacer le timer)
        console.log('\nüèÅ Test 5: Finaliser capture...');
        await testPoint.captureByAttack(kiriFaction._id, null);
        
        const finalPoint = await CapturePoint.findById(testPoint._id);
        console.log(`‚úÖ Timer apr√®s finalisation: ${finalPoint.confrontationTimer || 'Aucun'}`);
        console.log(`‚úÖ Derni√®re confrontation: ${finalPoint.lastConfrontationType || 'Aucune'}`);
        console.log(`‚úÖ Derni√®re confrontation par: ${finalPoint.lastConfrontationBy || 'Aucune'}`);
        
        if (!finalPoint.confrontationTimer && !finalPoint.lastConfrontationType && !finalPoint.lastConfrontationBy) {
            console.log('‚úÖ Timer de confrontation effac√© correctement');
        } else {
            console.log('‚ùå Timer de confrontation non effac√©');
        }
        
        console.log('\nüéâ Tous les tests du syst√®me de confrontation sont pass√©s !');
        console.log('\nüìã R√©sum√© du nouveau syst√®me:');
        console.log('   ‚úÖ Un seul timer de confrontation (2h)');
        console.log('   ‚úÖ Se r√©initialise apr√®s chaque action (attaque/d√©fense r√©ussie/rat√©e)');
        console.log('   ‚úÖ Se remet √† z√©ro lors de la finalisation de capture');
        console.log('   ‚úÖ Indique le type et la faction de la derni√®re confrontation');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nConnexion ferm√©e');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    testConfrontationTimer();
}

module.exports = { testConfrontationTimer };

