const mongoose = require('mongoose');
require('dotenv').config();

const CapturePoint = require('../models/CapturePoint');

async function showPointsOrganization() {
    try {
        // Connexion √† MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/capture_ninja', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        
        console.log('Connexion √† MongoDB √©tablie\n');
        
        // R√©cup√©rer tous les points
        const points = await CapturePoint.find().sort({ sector: 1, country: 1 });
        
        console.log('üìä ORGANISATION DES POINTS DE CAPTURE\n');
        console.log('=' .repeat(60));
        
        // Grouper par secteur
        const sectorsData = {};
        points.forEach(point => {
            if (!sectorsData[point.sector]) {
                sectorsData[point.sector] = {};
            }
            if (!sectorsData[point.sector][point.country]) {
                sectorsData[point.sector][point.country] = [];
            }
            sectorsData[point.sector][point.country].push(point);
        });
        
        // Afficher chaque secteur
        Object.entries(sectorsData).forEach(([sectorName, countries]) => {
            console.log(`\nüó∫Ô∏è  ${sectorName}`);
            console.log('-'.repeat(50));
            
            Object.entries(countries).forEach(([countryName, countryPoints]) => {
                console.log(`\n  üìç ${countryName} (${countryPoints.length} points):`);
                countryPoints.forEach((point, index) => {
                    const status = point.isCaptured ? 'üîí' : 'üîì';
                    const faction = point.faction ? ` [${point.faction.name}]` : '';
                    console.log(`    ${index + 1}. ${status} ${point.name} (${point.points} pts, ${point.difficulty})${faction}`);
                });
            });
            
            const totalPoints = Object.values(countries).flat().length;
            const totalValue = Object.values(countries).flat().reduce((sum, point) => sum + point.points, 0);
            console.log(`\n  üìä Total: ${totalPoints} points, ${totalValue} points de valeur`);
        });
        
        console.log('\n' + '='.repeat(60));
        console.log(`üéØ R√âSUM√â GLOBAL:`);
        console.log(`   ‚Ä¢ Total des points: ${points.length}`);
        console.log(`   ‚Ä¢ Total des secteurs: ${Object.keys(sectorsData).length}`);
        console.log(`   ‚Ä¢ Points captur√©s: ${points.filter(p => p.isCaptured).length}`);
        console.log(`   ‚Ä¢ Points libres: ${points.filter(p => !p.isCaptured).length}`);
        
    } catch (error) {
        console.error('Erreur:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nConnexion ferm√©e');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    showPointsOrganization();
}

module.exports = { showPointsOrganization };

