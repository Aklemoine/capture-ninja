const http = require('http');

console.log('üß™ Test de la r√©ponse du serveur...\n');

const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/',
    method: 'GET'
};

const req = http.request(options, (res) => {
    console.log(`‚úÖ Serveur r√©pond avec le code: ${res.statusCode}`);
    console.log(`üìã Headers:`, res.headers);
    
    let data = '';
    res.on('data', (chunk) => {
        data += chunk;
    });
    
    res.on('end', () => {
        console.log(`üìÑ Taille de la r√©ponse: ${data.length} caract√®res`);
        
        // V√©rifier si c'est du HTML valide
        if (data.includes('<html') && data.includes('</html>')) {
            console.log('‚úÖ HTML valide d√©tect√©');
        } else {
            console.log('‚ùå HTML invalide ou manquant');
        }
        
        // V√©rifier les scripts
        const scriptMatches = data.match(/<script[^>]*src="([^"]*)"[^>]*>/g);
        if (scriptMatches) {
            console.log(`üìú ${scriptMatches.length} scripts trouv√©s:`);
            scriptMatches.forEach((script, index) => {
                const srcMatch = script.match(/src="([^"]*)"/);
                if (srcMatch) {
                    console.log(`   ${index + 1}. ${srcMatch[1]}`);
                }
            });
        } else {
            console.log('‚ùå Aucun script trouv√©');
        }
        
        // V√©rifier les erreurs potentielles
        if (data.includes('error') || data.includes('Error')) {
            console.log('‚ö†Ô∏è  Erreurs potentielles d√©tect√©es dans le HTML');
        }
        
        console.log('\nüéØ Test termin√© !');
    });
});

req.on('error', (e) => {
    console.log(`‚ùå Erreur de connexion: ${e.message}`);
});

req.setTimeout(5000, () => {
    console.log('‚è∞ Timeout - Le serveur ne r√©pond pas');
    req.destroy();
});

req.end();
