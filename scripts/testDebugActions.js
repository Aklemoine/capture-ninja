const fs = require('fs');
const path = require('path');

console.log('üß™ Test des actions avec debug...\n');

// Test 1: V√©rifier que les logs de debug sont ajout√©s
console.log('1Ô∏è‚É£ Test des logs de debug dans createPointActions');
try {
    const simplifiedNavPath = path.join(__dirname, '../public/js/simplifiedNavigation.js');
    const simplifiedNavContent = fs.readFileSync(simplifiedNavPath, 'utf8');
    
    if (simplifiedNavContent.includes('console.log(\'Cr√©ation des actions pour le point:\'')) {
        console.log('   ‚úÖ Log de debug ajout√© pour createPointActions');
    } else {
        console.log('   ‚ùå Log de debug manquant pour createPointActions');
    }
    
    if (simplifiedNavContent.includes('console.log(\'Actions pour point Kiri\')')) {
        console.log('   ‚úÖ Log de debug ajout√© pour points Kiri');
    } else {
        console.log('   ‚ùå Log de debug manquant pour points Kiri');
    }
    
    if (simplifiedNavContent.includes('console.log(\'Actions pour point captur√© par:\')')) {
        console.log('   ‚úÖ Log de debug ajout√© pour points captur√©s');
    } else {
        console.log('   ‚ùå Log de debug manquant pour points captur√©s');
    }
    
    if (simplifiedNavContent.includes('console.log(\'Actions pour point libre\')')) {
        console.log('   ‚úÖ Log de debug ajout√© pour points libres');
    } else {
        console.log('   ‚ùå Log de debug manquant pour points libres');
    }
    
    console.log('');
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}\n`);
}

// Test 2: V√©rifier la correction de l'erreur Map container
console.log('2Ô∏è‚É£ Test de la correction de l\'erreur Map container');
try {
    const mapPath = path.join(__dirname, '../public/js/map.js');
    const mapContent = fs.readFileSync(mapPath, 'utf8');
    
    if (mapContent.includes('const mapElement = document.getElementById(\'map\')')) {
        console.log('   ‚úÖ V√©rification de l\'existence de l\'√©l√©ment map ajout√©e');
    } else {
        console.log('   ‚ùå V√©rification de l\'existence de l\'√©l√©ment map manquante');
    }
    
    if (mapContent.includes('if (!mapElement) {')) {
        console.log('   ‚úÖ Condition de v√©rification ajout√©e');
    } else {
        console.log('   ‚ùå Condition de v√©rification manquante');
    }
    
    if (mapContent.includes('console.log(\'√âl√©ment map non trouv√©, initialisation de la carte Leaflet ignor√©e\')')) {
        console.log('   ‚úÖ Message de log ajout√©');
    } else {
        console.log('   ‚ùå Message de log manquant');
    }
    
    console.log('');
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}\n`);
}

// Test 3: V√©rifier les donn√©es de test
console.log('3Ô∏è‚É£ Test des donn√©es de test');
try {
    const simplifiedNavPath = path.join(__dirname, '../public/js/simplifiedNavigation.js');
    const simplifiedNavContent = fs.readFileSync(simplifiedNavPath, 'utf8');
    
    // V√©rifier que les points du Pays du Feu ont des statuts vari√©s
    if (simplifiedNavContent.includes("capturedBy: 'Konoha'")) {
        console.log('   ‚úÖ Point captur√© par Konoha trouv√©');
    } else {
        console.log('   ‚ùå Point captur√© par Konoha manquant');
    }
    
    if (simplifiedNavContent.includes("capturedBy: 'Kiri'")) {
        console.log('   ‚úÖ Point captur√© par Kiri trouv√©');
    } else {
        console.log('   ‚ùå Point captur√© par Kiri manquant');
    }
    
    if (simplifiedNavContent.includes('capturedBy: null')) {
        console.log('   ‚úÖ Point libre trouv√©');
    } else {
        console.log('   ‚ùå Point libre manquant');
    }
    
    console.log('');
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}\n`);
}

// Test 4: V√©rifier que les actions sont bien d√©finies
console.log('4Ô∏è‚É£ Test des actions d√©finies');
try {
    const simplifiedNavPath = path.join(__dirname, '../public/js/simplifiedNavigation.js');
    const simplifiedNavContent = fs.readFileSync(simplifiedNavPath, 'utf8');
    
    const expectedActions = [
        'Attaque R√©ussie', 'Attaque Rat√©e', 'D√©fense R√©ussie', 'D√©fense Rat√©e',
        'Capturer Directement', 'Lib√©rer'
    ];
    
    let actionsFound = 0;
    expectedActions.forEach(action => {
        if (simplifiedNavContent.includes(action)) {
            actionsFound++;
            console.log(`   ‚úÖ ${action} trouv√©`);
        } else {
            console.log(`   ‚ùå ${action} manquant`);
        }
    });
    
    console.log(`   üìä ${actionsFound}/${expectedActions.length} actions trouv√©es\n`);
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}\n`);
}

// Test 5: V√©rifier les m√©thodes de gestion
console.log('5Ô∏è‚É£ Test des m√©thodes de gestion');
try {
    const simplifiedNavPath = path.join(__dirname, '../public/js/simplifiedNavigation.js');
    const simplifiedNavContent = fs.readFileSync(simplifiedNavPath, 'utf8');
    
    const expectedMethods = [
        'handleAttackSuccess', 'handleAttackFailed', 'handleDefenseSuccess', 
        'handleDefenseFailed', 'handleLiberate', 'showCaptureModal', 'performCombatAction'
    ];
    
    let methodsFound = 0;
    expectedMethods.forEach(method => {
        if (simplifiedNavContent.includes(`${method}(`)) {
            methodsFound++;
            console.log(`   ‚úÖ ${method} trouv√©`);
        } else {
            console.log(`   ‚ùå ${method} manquant`);
        }
    });
    
    console.log(`   üìä ${methodsFound}/${expectedMethods.length} m√©thodes trouv√©es\n`);
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}\n`);
}

console.log('üéâ Test des actions avec debug termin√© !');
console.log('\nüìã R√©sum√© des corrections apport√©es :');
console.log('   ‚Ä¢ Logs de debug ajout√©s dans createPointActions');
console.log('   ‚Ä¢ Erreur Map container corrig√©e');
console.log('   ‚Ä¢ Donn√©es de test avec statuts vari√©s');
console.log('   ‚Ä¢ Actions et m√©thodes de gestion v√©rifi√©es');
console.log('\n‚úÖ Le syst√®me devrait maintenant afficher les bonnes actions !');
console.log('\nüîß Instructions de test :');
console.log('   1. Ouvrir http://localhost:3000');
console.log('   2. Ouvrir la console du navigateur (F12)');
console.log('   3. Aller dans "Liste des Points"');
console.log('   4. Cliquer sur "Secteur Pays du Feu (S1)"');
console.log('   5. Cliquer sur "Pays du Feu (Konoha)"');
console.log('   6. V√©rifier dans la console les logs de debug :');
console.log('      - "Cr√©ation des actions pour le point: Clairi√®re vall√©e de la fin capturedBy: Konoha"');
console.log('      - "Actions pour point captur√© par: Konoha"');
console.log('      - "Cr√©ation des actions pour le point: La Clairi√®re de Konoha capturedBy: Kiri"');
console.log('      - "Actions pour point Kiri"');
console.log('      - "Cr√©ation des actions pour le point: Le hameau du pays du Feu capturedBy: null"');
console.log('      - "Actions pour point libre"');
console.log('   7. V√©rifier que les bonnes actions s\'affichent pour chaque point');
console.log('\nüéØ Les logs de debug vous diront exactement pourquoi les actions ne s\'affichent pas !');
